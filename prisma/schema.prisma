generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  String?
  author    User?   @relation(fields: [authorId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Attendance {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime
  signIn            Boolean          @default(true)
  signOut           Boolean
  signInTime        DateTime         @default(now())
  signOutTime       DateTime?
  userId            Int?
  attendanceSheetId Int?
  AttendanceSheet   AttendanceSheet? @relation(fields: [attendanceSheetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_OLD          User_OLD?        @relation(fields: [userId], references: [id], onUpdate: NoAction)
}

model AttendanceSheet {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  userId       Int?
  attendanceId Int?
  Attendance   Attendance[]
  User_OLD     User_OLD?    @relation(fields: [userId], references: [id])
}

model User_OLD {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  emailAddy       String            @unique(map: "User-OLD_email_key")
  name            String
  password        String
  role            String
  Attendance      Attendance[]
  AttendanceSheet AttendanceSheet[]

  @@map("User-OLD")
}
